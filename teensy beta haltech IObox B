#include <FlexCAN_T4.h>

FlexCAN_T4<CAN1, RX_SIZE_256, TX_SIZE_16> can1;
FlexCAN_T4<CAN2, RX_SIZE_256, TX_SIZE_16> can2;
CAN_message_t KeepAlivemsg;
CAN_message_t msg;
CAN_message_t Analogmsg;


long unsigned int rxId;           // storage for can data
unsigned char len = 0;            // storage for can data
unsigned char rxBuf[8];           // storage for can data


const int DPO1 = 3;
const int DPO2 = 5;
const int DPO3 = 6;
const int DPO4 = 9;

int DPI1input = 4; // dpi 1 input
int DPI2input = 4; // dpi 2 input
int DPI3input = 4; // dpi 3 input
int DPI4input = 4; // dpi 4 input

bool DPI1in = 0;
bool DPI2in = 0;
bool DPI3in = 0;
bool DPI4in = 0;

int scaledvalue1 = 0;             // storage for 12 bit analog value
int scaledvalue2 = 0;             // storage for 12 bit analog value
int scaledvalue3 = 0;             // storage for 12 bit analog value
int scaledvalue4 = 0;             // storage for 12 bit analog value

unsigned long task1Interval = 100; // 100ms interval for keep alive frame
unsigned long task2Interval = 20;  // 20ms interval for analogue value sending
unsigned long task3Interval = 20;  // 20ms interval for analogue value reading 
unsigned long task4Interval = 20;  // 20ms interval for reading digital input
unsigned long task1Millis = 0;     // storage for millis counter
unsigned long task2Millis = 0;     // storage for millis counter
unsigned long task3Millis = 0;     // storage for millis counter
unsigned long task4Millis = 0;     // storage for millis counter

byte DPO1out = 0;                 // storage for DPO output 1
byte DPO2out = 0;                 // storage for DPO output 2
byte DPO3out = 0;                 // storage for DPO output 3
byte DPO4out = 0;                 // storage for DPO output 4

void setup(void) {
  can1.begin();
  can1.setBaudRate(1000000);

    Serial.begin(115200);   

  pinMode(DPO1, OUTPUT); // set pin number for DPO1
  pinMode(DPO2, OUTPUT); // set pin number for DPO2
  pinMode(DPO3, OUTPUT); // set pin number for DPO3
  pinMode(DPO4, OUTPUT); // set pin number for DPO4
}

void loop() {
 
  unsigned long currentMillis = millis();  // Get current time in milliseconds


  // Execute task 2 every 5 seconds
  if (currentMillis - task2Millis >= task2Interval) {
    task2Millis = currentMillis;
    SendAnalogValues();
  }

  // Execute task 1 every 1 second
  if (currentMillis - task1Millis >= task1Interval) {
    task1Millis = currentMillis;
    SendKeepAlive();
  }

  // read CAN buffer when interrupted and jump to canRead for processing.
  if (can1.read(msg) )  // If CAN0_INT pin is low, read receive buffer
  {
    rxId = msg.id;
    canRead();
  }
}

void canRead() {
  if (rxId == 0x2D1) {
    Serial.println("2D1");  // all ready to go!
  }
}




void SendKeepAlive() {
 // byte KeepAlive[5] = { 0X10, 0x09, 0x0a, 0x00, 0x00 };
  KeepAlivemsg.id = 0x2C7;
  KeepAlivemsg.len = 5;
  KeepAlivemsg.buf[0] = 0X10;
  KeepAlivemsg.buf[1] = 0X09;
  KeepAlivemsg.buf[2] = 0X0A;
  KeepAlivemsg.buf[3] = 0X00;
  KeepAlivemsg.buf[4] = 0X00;

  can1.write(KeepAlivemsg);
}






void SendAnalogValues() {

  // struct the analogue values
  struct m2C1truct {
    unsigned int AVI1_V : 16;  //0:3-1:0
    unsigned int AVI2_V : 16;  //2:3-3:0
    unsigned int AVI3_V : 16;  //4:3-5:0
    unsigned int AVI4_V : 16;  //6:3-7:0
  };

  // union / make a struct
  union union_m2C1 {
    struct m2C1truct data;
    byte bytes[8];
  };

  // construct the can message
  struct canMsg {
    union_m2C1 m2C1;
  } canMsg;


  scaledvalue1 = map(analogRead(A0), 0, 1023, 0, 4095);  // read analogue value and scale to 12 bit
  scaledvalue2 = map(analogRead(A1), 0, 1023, 0, 4095);  // read analogue value and scale to 12 bit
  scaledvalue3 = map(analogRead(A2), 0, 1023, 0, 4095);  // read analogue value and scale to 12 bit
  scaledvalue4 = map(analogRead(A3), 0, 1023, 0, 4095);  // read analogue value and scale to 12 bit

  canMsg.m2C1.data.AVI1_V = scaledvalue1;  // add scaled analogue value to message
  canMsg.m2C1.data.AVI2_V = scaledvalue2;  // add scaled analogue value to message
  canMsg.m2C1.data.AVI3_V = scaledvalue3;  // add scaled analogue value to message
  canMsg.m2C1.data.AVI4_V = scaledvalue4;  // add scaled analogue value to message




Analogmsg.id = 0X2C1;
Analogmsg.len = 8;
Analogmsg.buf[0] = canMsg.m2C1.bytes[1];
Analogmsg.buf[1] = canMsg.m2C1.bytes[0];
Analogmsg.buf[2] = canMsg.m2C1.bytes[3];
Analogmsg.buf[3] = canMsg.m2C1.bytes[2];
Analogmsg.buf[4] = canMsg.m2C1.bytes[5];
Analogmsg.buf[5] = canMsg.m2C1.bytes[4];
Analogmsg.buf[6] = canMsg.m2C1.bytes[7];
Analogmsg.buf[7] = canMsg.m2C1.bytes[6];

can1.write(Analogmsg);  // send the can message onto the bus
  
}
