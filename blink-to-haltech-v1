#include <FlexCAN_T4.h>

FlexCAN_T4<CAN1, RX_SIZE_256, TX_SIZE_16> can1;
FlexCAN_T4<CAN2, RX_SIZE_256, TX_SIZE_16> can2;
CAN_message_t KeepAlivemsg;
CAN_message_t Buttonmsg;
CAN_message_t msg;
CAN_message_t msg1;
CAN_message_t startBlinkMarine;
CAN_message_t Haltechsendmsg;
CAN_message_t Blinkled;

long unsigned int rxId;  // storage for can data
unsigned char len = 0;   // storage for can data
unsigned char rxBuf[8];  // storage for can data

unsigned long task1Interval = 100; // 100ms interval for keep alive frame
unsigned long task2Interval = 20;  // 20ms interval for analogue value sending
unsigned long task3Interval = 20;  // 20ms interval for analogue value reading 
unsigned long task4Interval = 20;  // 20ms interval for reading digital input
unsigned long task1Millis = 0;     // storage for millis counter
unsigned long task2Millis = 0;     // storage for millis counter
unsigned long task3Millis = 0;     // storage for millis counter
unsigned long task4Millis = 0;     // storage for millis counter

bool button1;
bool button2;
bool button3;
bool button4;
bool button5;
bool button6;
bool button7;
bool button8;
bool button9;
bool button10;
bool button11;
bool button12;

byte out1 = 4;
byte out2 = 5;
byte out3 = 6;
byte out4 = 7;



unsigned long KAinterval = 150;              // 50ms interval for keep aliv frame
unsigned long ButtonInfoInterval = 30;      // 30ms interval for button info frame
unsigned long KAintervalMillis = 0;         // storage for millis counter
unsigned long ButtonInfoIntervalMillis = 0; // storage for millis counter




void setup() {
  // put your setup code here, to run once:
Serial.begin(115200);
  can2.begin();
  can2.setBaudRate(500000);

  can1.begin();
  can1.setBaudRate(1000000);



Serial.println("can ready, sending blink start command in 2 sec");

  delay(2000);
KPstart();
}





void loop() {

  unsigned long currentMillis = millis();  // Get current time in milliseconds

  // Execute keepalive frame every 50 ms
  if (currentMillis - KAintervalMillis >= KAinterval) {
    KAintervalMillis = currentMillis;
    SendKeepAlive();
  }


 if (can1.read(msg) ) // If CAN0_INT pin is low, read receive buffer
  {
    rxId = msg.id;
    len  = msg.len;
    for (int i = 0; i < 8; ++i) {
        rxBuf[i] = msg.buf[i];
    canRead(); // execute canRead function to negotiate with ecu
    }
  }

if (can2.read(msg1) ) // If CAN0_INT pin is low, read receive buffer
  {
    rxId = msg1.id;
    len  = msg1.len;
    for (int i = 0; i < 8; ++i) {
        rxBuf[i] = msg1.buf[i];
    canRead1(); // execute canRead function to negotiate with ecu
    }
  }


  // Execute buttoninfo frame every 30 ms
  if (currentMillis - ButtonInfoIntervalMillis >= ButtonInfoInterval) {
    ButtonInfoIntervalMillis = currentMillis;
    SendButtonInfo();
  }

}








void SendButtonInfo() {                                
  bitWrite(Buttonmsg.buf[0], 0, button1);                      // byte 0, bit 0, button 1 
  bitWrite(Buttonmsg.buf[0], 1, button2);                      // byte 0, bit 0, button 2
  bitWrite(Buttonmsg.buf[0], 2, button3);                      // byte 0, bit 0, button 3
  bitWrite(Buttonmsg.buf[0], 3, button4);                      // byte 0, bit 0, button 4
  bitWrite(Buttonmsg.buf[0], 4, button5);                      // byte 0, bit 0, button 5
  bitWrite(Buttonmsg.buf[0], 5, button6);                      // byte 0, bit 0, button 6
  bitWrite(Buttonmsg.buf[0], 6, button7);                      // byte 0, bit 0, button 7
  bitWrite(Buttonmsg.buf[0], 7, button8);                      // byte 0, bit 0, button 8



  Buttonmsg.buf[1] = 0;                                  // byte 2 filled with 0
  Buttonmsg.id = 0x18B;
  Buttonmsg.len = 2;
  can1.write(Buttonmsg);

}



void canRead() {
  // CAN Input from Haltech Keypad
  int b0;
  int b1;
  int b2;
  int b3;
  int b4;
  int b5;
  int b6;
  int b7;

  // Keypad Configuration Section

  if (rxId == 0X60B) {
    if ((rxBuf[0]) == 34) {
      b0 = 96;
      b1 = (rxBuf[1]);
      b2 = (rxBuf[2]);
      b3 = (rxBuf[3]);
      b4 = 0;
      b5 = 0;
      b6 = 0;
      b7 = 0;

    } else if ((rxBuf[0]) == 66) {
      b0 = 67;
      b1 = (rxBuf[1]);
      b2 = (rxBuf[2]);
      b3 = (rxBuf[3]);
      if ((b1 == 24) && (b2 == 16) && (b3 == 1)) {
        b4 = 7;
        b5 = 4;
        b6 = 0;
        b7 = 0;
      } else if ((b1 == 24) && (b2 == 16) && (b3 == 2)) {
        b4 = 75;
        b5 = 51;
        b6 = 0;
        b7 = 0;
      } else if ((b1 == 24) && (b2 == 16) && (b3 == 3)) {
        b4 = 1;
        b5 = 0;
        b6 = 0;
        b7 = 0;
      } else if ((b1 == 24) && (b2 == 16) && (b3 == 4)) {
        b4 = 207;
        b5 = 184;
        b6 = 25;
        b7 = 12;
      } else if ((b1 == 0) && (b2 == 24) && (b3 == 1)) {
        b4 = 139;
        b5 = 1;
        b6 = 0;
        b7 = 64;
      } else {
        b4 = 0;
        b5 = 0;
        b6 = 0;
        b7 = 0;
      }

    } else if (((rxBuf[0]) == 0) && ((rxBuf[7]) == 200)) {
      b0 = 128;
      b1 = 0;
      b2 = 0;
      b3 = 0;
      b4 = 1;
      b5 = 0;
      b6 = 4;
      b7 = 5;

    }
    byte txBuf[8] = { b0, b1, b2, b3, b4, b5, b6, b7 };

    Haltechsendmsg.id = 0x58B;
    Haltechsendmsg.len = 8;
    Haltechsendmsg.buf[0] = txBuf[0];
    Haltechsendmsg.buf[1] = txBuf[1];
    Haltechsendmsg.buf[2] = txBuf[2];
    Haltechsendmsg.buf[3] = txBuf[3];
    Haltechsendmsg.buf[4] = txBuf[4];
    Haltechsendmsg.buf[5] = txBuf[5];
    Haltechsendmsg.buf[6] = txBuf[6];
    Haltechsendmsg.buf[7] = txBuf[7];
    can1.write(Haltechsendmsg);
  }
}

void canRead1() {

  if (rxId == 0x195) 
    {
        button1  = bitRead(rxBuf[0], 0);
        button2  = bitRead(rxBuf[0], 1);
        button3  = bitRead(rxBuf[0], 2);
        button4  = bitRead(rxBuf[0], 3);
        button5  = bitRead(rxBuf[0], 4);
        button6  = bitRead(rxBuf[0], 5);
        button7  = bitRead(rxBuf[0], 6);
        button8  = bitRead(rxBuf[0], 7);
        button9  = bitRead(rxBuf[1], 0);
        button10 = bitRead(rxBuf[1], 1);
        button11 = bitRead(rxBuf[1], 2);
        button12 = bitRead(rxBuf[1], 3);


        byte ledstate[8];

        
         bitWrite(Blinkled.buf[1], 4, button1);
         bitWrite(Blinkled.buf[1], 5, button2);
         bitWrite(Blinkled.buf[1], 6, button3);
         bitWrite(Blinkled.buf[1], 7, button4);


        // bitWrite(ledstate[2], 0, !button5);
        // bitWrite(ledstate[2], 1, !button6);
        // bitWrite(ledstate[2], 2, !button7);
        // bitWrite(ledstate[2], 3, !button8);
        // bitWrite(ledstate[2], 4, !button9);
        // bitWrite(ledstate[2], 5, !button10);
        // bitWrite(ledstate[2], 6, !button11);
        // bitWrite(ledstate[2], 7, !button12);





      Blinkled.id = 0x215;
      Blinkled.len = 8;
      Blinkled.buf[0] = 0;

      for (int i = 2; i < 8; ++i) {
            Blinkled.buf[i] = 0;
            }
       // CAN1.sendMsgBuf(0x215, 0, 8, ledstate);
       can2.write(Blinkled);


    }

}





void SendKeepAlive() {                                // send keep alive frame
  KeepAlivemsg.id = 0x70B;
  KeepAlivemsg.len = 1;
  KeepAlivemsg.buf[0] = 0x5;
  can1.write(KeepAlivemsg);
}


void KPstart() {
  startBlinkMarine.id = 0X00;
  startBlinkMarine.len = 2;
  startBlinkMarine.buf[0] = 0x01;
  startBlinkMarine.buf[1] = 0x15;
  can2.write(startBlinkMarine);  // send the can message onto the bus
  Serial.println("done");
}
